# This is a basic workflow to help you get started with Actions

name: AMI Build action

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  app_compress:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: mkdir app_patch
        run: rsync -arv --exclude='node_modules/' . ./app_patch
      - name: cd app_patch
        run: |
          zip -r app_patch.zip app_patch
      - uses: actions/upload-artifact@v1
        with:
          name: app_patch.zip
          path: ${{ github.workspace }}/app_patch.zip
          
  # This workflow contains a single job called "packer_build"
  packer_build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: app_compress

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with: 
         name: app_patch.zip
      - name: Display structure of downloaded files
        run: ls -d $PWD/*

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: us-east-1 

      # Runs a single command using the runners shell
      - name: Packer Build
        uses: ExitoLab/packer_build_action_aws@v0.2.10
        with:
          templateFile: 'ami.json'
          workingDir: '.'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_KEY_ID: ${{ secrets.AWS_SECRET_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SOURCE_AMI: ${{ secrets.AWS_SOURCE_AMI }}
          AWS_SUBNET_ID: ${{ secrets.AWS_SUBNET_ID }}
          AWS_SSH_USERNAME: ${{ secrets.AWS_SSH_USERNAME }}
          AMI_PROD_USERNAME: ${{ secrets.AMI_PROD_USERNAME }}
      
      # Code deploy
      # - name: Configuring AWS credentials from Test account
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
      #     aws-region: us-east-1 

      - name: Uploading Application Revision to CodeDeploy S3 Bucket
        run: |
          mkdir codedeploy_artifact
          aws s3 sync ./codedeploy_artifact s3://${{ secrets.AWS_CODEDEPLOY_S3_BUCKET }}
          
      - name: CodeDeploy API call
        run: |
          output=$(aws deploy create-deployment \
          --application-name csye6225-webapp \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name csye6225-webapp-deployment \
          --description "CSYE6255 - CodeDeploy from Github Actions" \
          --s3-location bucket=${{ secrets.AWS_CODEDEPLOY_S3_BUCKET }},key=build-${{ github.sha }}.zip,bundleType=zip \
          --region ${{ secrets.AWS_REGION }} \
          --file-exists-behavior OVERWRITE \
          --output json)
          depId=$(echo $output | jq -r '.deploymentId')
          aws deploy wait deployment-successful --deployment-id $depId
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_CODEDEPLOY_S3_BUCKET: ${{ secrets.AWS_CODEDEPLOY_S3_BUCKET }}